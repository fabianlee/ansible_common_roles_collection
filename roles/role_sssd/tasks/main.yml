---
- name: create custom facts directory
  file:
    path: /etc/ansible/facts.d
    state: directory
  become: yes
  when: sssd_deploy_facts

- name: deploy custom facts
  copy:
    src: sssd.fact
    dest: /etc/ansible/facts.d/sssd.fact
    mode: 0755
  become: yes
  when: sssd_deploy_facts


- name: add windows group Domain Admins to sudoers
  become: yes
  lineinfile:
    dest: /etc/sudoers
    line: '%domain_admins   ALL=(ALL)       NOPASSWD: ALL'

- name: add AD groups to sudoers
  become: yes
  lineinfile:
    dest: /etc/sudoers
    line: '{{item}}   ALL=(ALL)       NOPASSWD: ALL'
  with_items: "{{sssd_sudoers}}"
  when: sssd_sudoers is defined


- name: install SSSD
  package:
    name: "{{ sssd_packages }}"
    state: present
  become: yes

- name: deploy sssd.conf
  template:
    src: sssd.conf.j2
    dest: /etc/sssd/sssd.conf
    mode: 0600
  become: yes
  notify:
    - restart sssd

- name: install oddjobd
  package:
    name: "{{ sssd_oddjob_packages }}"
    state: present
  become: yes
  notify:
    - restart oddjobd
    - restart sssd
  when: sssd_oddjob_mkhomedir

- name: enable home directory creation
  become: true
  # --force overwrites current PAM without question
  # --package would lower priority of manual prompt (needed on xenial, bionic/focal work without flag)
  command: pam-auth-update --enable mkhomedir --force --package
  notify:
    - restart sssd

- name: run authconfig
  command: /usr/sbin/authconfig {{ sssd_authconfig | longoptions() }} --update
  become: yes
  when: __sssd_redhat

- name: Copy ldap_tls_cacert to host for use by sssd as well as ldapsearch
  copy:
    src: "{{ sssd_local_ldap_cert_dir }}/{{ sssd_domains[item]['ldap_tls_cacert'] | basename }}"
    dest: "{{ sssd_domains[item]['ldap_tls_cacert'] }}"
    owner: root
    group: root
    mode: 'u=rw,g=r,o=r'
  with_items: "{{ sssd_domains }}"
  when: sssd_domains[item].ldap_tls_cacert is defined

- name: ensure TLS_REQCERT is set for ldap utilities, this is global
  lineinfile:
    path: /etc/ldap/ldap.conf
    regexp: '^TLS_REQCERT\t'
    line: "TLS_REQCERT\t{{ sssd_domains[item]['ldap_tls_reqcert'] }}"
    insertafter: EOF
    state: present
  become: yes
  with_items: "{{ sssd_domains }}"
  when: sssd_domains[item].ldap_tls_reqcert is defined

- name: add ldap_tls_cacert to /etc/ldap/ldap.conf
  lineinfile:
    path: /etc/ldap/ldap.conf
    line: "TLS_CACERT\t{{ sssd_domains[item]['ldap_tls_cacert'] }}"
    insertafter: EOF
    state: present
  become: yes
  with_items: "{{ sssd_domains }}"
  when: sssd_domains[item].ldap_tls_cacert is defined
 
- name: test secure ldap connection using ldapsearch
  command: ldapsearch -LLL -H {{sssd_domains[item]['ldap_uri']}} -D '{{sssd_domains[item]['ldap_default_bind_dn']}}' -w '{{extravar_ldap_default_authtok|default(sssd_domains[item]['ldap_default_authtok'])}}' -b '{{sssd_domains[item]['ldap_search_base']}}' -s sub '(distinguishedName={{sssd_domains[item]['ldap_default_bind_dn']}})'
  register: ldapsearch_results
  with_items: "{{ sssd_domains }}"
  when: sssd_domains[item].ldap_tls_cacert is defined
- name: debug output from ldapsearch
  debug: msg="{{item.stdout_lines}}"
  with_items: "{{ldapsearch_results.results}}"
  when: ldapsearch_results.changed

# make sure sssd restart happens so test can be run (instead of by handler at end)
- name: Flush handlers
  meta: flush_handlers

- name: retrieve user information with id
  command: id {{sssd_testuser}}
  register: id_result
  retries: 3
  delay: 30
  until: id_result.rc == 0
  when: sssd_testuser is defined
- name: show id result
  debug: msg="{{id_result.stdout_lines}}"
  when: sssd_testuser is defined
